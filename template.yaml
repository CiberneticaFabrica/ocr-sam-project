AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  OCR SAM Project v2.0 - Simplified S3-Only Flow
  Sistema automatizado de procesamiento OCR de documentos legales

# Global configuration
Globals:
  Function:
    Timeout: 900
    MemorySize: 1024
    Runtime: python3.9
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        S3_BUCKET_NAME: !Ref S3BucketName
        MISTRAL_API_KEY: !Ref MistralApiKey
        CREATIO_URL: !Ref CreatioUrl
        CREATIO_USERNAME: !Ref CreatioUsername
        CREATIO_PASSWORD: !Ref CreatioPassword
        LOG_LEVEL: INFO

# Parameters
Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name
  
  S3BucketName:
    Type: String
    Default: ocr-legal-documents-dev
    Description: S3 bucket for document storage
  
  MistralApiKey:
    Type: String
    NoEcho: true
    Description: Mistral AI API key for OCR processing
  
  CreatioUrl:
    Type: String
    Description: Creatio CRM URL
  
  CreatioUsername:
    Type: String
    Description: Creatio username
  
  CreatioPassword:
    Type: String
    NoEcho: true
    Description: Creatio password
  
  EnableDynamoDB:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: Enable DynamoDB tracking tables

# Conditions
Conditions:
  EnableDynamoDBCondition: !Equals [!Ref EnableDynamoDB, 'true']
  IsProduction: !Equals [!Ref Environment, 'prod']

# Resources
Resources:
  
  # ================================
  # S3 BUCKET
  # ================================
  # S3 Bucket (import existing bucket)
  DocumentStorage:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Ref S3BucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt DocumentProcessorFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: incoming/
                  - Name: suffix
                    Value: .pdf

  # S3 Permission for Lambda
  S3InvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DocumentProcessorFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub "arn:aws:s3:::${S3BucketName}"

  # ================================
  # SQS QUEUES
  # ================================
  
  # OCR Processing Queue
  OCRProcessingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::StackName}-ocr-processing"
      VisibilityTimeout: 960  # 16 minutes (longer than Lambda timeout)
      MessageRetentionPeriod: 1209600  # 14 days
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt OCRDeadLetterQueue.Arn
        maxReceiveCount: 3
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: OCR Processing

  # OCR Dead Letter Queue
  OCRDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::StackName}-ocr-dlq"
      MessageRetentionPeriod: 1209600  # 14 days
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: OCR Dead Letter Queue

  # CRM Integration Queue
  CRMQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::StackName}-crm-integration"
      VisibilityTimeout: 360  # 6 minutes (longer than Lambda timeout)
      MessageRetentionPeriod: 1209600  # 14 days
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt CRMDeadLetterQueue.Arn
        maxReceiveCount: 3
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: CRM Integration

  # CRM Dead Letter Queue
  CRMDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::StackName}-crm-dlq"
      MessageRetentionPeriod: 1209600  # 14 days
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # ================================
  # DYNAMODB TABLES
  # ================================
  
  # Batch Tracking Table
  BatchTrackingTable:
    Type: AWS::DynamoDB::Table
    Condition: EnableDynamoDBCondition
    Properties:
      TableName: !Sub "${AWS::StackName}-BatchTracking"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: batch_id
          AttributeType: S
        - AttributeName: status
          AttributeType: S
        - AttributeName: created_at
          AttributeType: S
      KeySchema:
        - AttributeName: batch_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: StatusIndex
          KeySchema:
            - AttributeName: status
              KeyType: HASH
            - AttributeName: created_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # Job Tracking Table
  JobTrackingTable:
    Type: AWS::DynamoDB::Table
    Condition: EnableDynamoDBCondition
    Properties:
      TableName: !Sub "${AWS::StackName}-JobTracking"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: job_id
          AttributeType: S
        - AttributeName: batch_id
          AttributeType: S
        - AttributeName: status
          AttributeType: S
      KeySchema:
        - AttributeName: job_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: BatchIndex
          KeySchema:
            - AttributeName: batch_id
              KeyType: HASH
            - AttributeName: status
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # ================================
  # LAMBDA FUNCTIONS
  # ================================
  
  # Document Processor Function (Main Entry Point)
  DocumentProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-document-processor"
      CodeUri: src/document_processor/
      Handler: app.lambda_handler
      Description: Processes PDF documents from S3 and splits into oficios
      MemorySize: 2048
      Timeout: 600
      Environment:
        Variables:
          OCR_QUEUE_URL: !Ref OCRProcessingQueue
          BATCH_TRACKING_TABLE: !If 
            - EnableDynamoDBCondition
            - !Ref BatchTrackingTable
            - !Ref AWS::NoValue
          JOB_TRACKING_TABLE: !If
            - EnableDynamoDBCondition
            - !Ref JobTrackingTable
            - !Ref AWS::NoValue
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref S3BucketName
        - S3WritePolicy:
            BucketName: !Ref S3BucketName
        - SQSSendMessagePolicy:
            QueueName: !GetAtt OCRProcessingQueue.QueueName
        - DynamoDBWritePolicy:
            TableName: !If
              - EnableDynamoDBCondition
              - !Ref BatchTrackingTable
              - !Ref AWS::NoValue
        - DynamoDBWritePolicy:
            TableName: !If
              - EnableDynamoDBCondition  
              - !Ref JobTrackingTable
              - !Ref AWS::NoValue
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket: !Ref DocumentStorage
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: incoming/
                  - Name: suffix
                    Value: .pdf

  # OCR Processor Function
  OCRProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-ocr-processor"
      CodeUri: src/ocr_processor/
      Handler: app.lambda_handler
      Description: Processes individual oficios with OCR and AI
      MemorySize: 3008
      Timeout: 900
      Environment:
        Variables:
          CRM_QUEUE_URL: !Ref CRMQueue
          BATCH_TRACKING_TABLE: !If
            - EnableDynamoDBCondition
            - !Ref BatchTrackingTable
            - !Ref AWS::NoValue
          JOB_TRACKING_TABLE: !If
            - EnableDynamoDBCondition
            - !Ref JobTrackingTable
            - !Ref AWS::NoValue
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref S3BucketName
        - S3WritePolicy:
            BucketName: !Ref S3BucketName
        - SQSPollerPolicy:
            QueueName: !GetAtt OCRProcessingQueue.QueueName
        - SQSSendMessagePolicy:
            QueueName: !GetAtt CRMQueue.QueueName
        - DynamoDBWritePolicy:
            TableName: !If
              - EnableDynamoDBCondition
              - !Ref BatchTrackingTable
              - !Ref AWS::NoValue
        - DynamoDBWritePolicy:
            TableName: !If
              - EnableDynamoDBCondition
              - !Ref JobTrackingTable  
              - !Ref AWS::NoValue
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt OCRProcessingQueue.Arn
            BatchSize: 1
            MaximumBatchingWindowInSeconds: 5

  # CRM Integrator Function
  CRMIntegratorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-crm-integrator"
      CodeUri: src/crm_integrator/
      Handler: app.lambda_handler
      Description: Integrates OCR results with Creatio CRM
      MemorySize: 1024
      Timeout: 300
      Environment:
        Variables:
          BATCH_TRACKING_TABLE: !If
            - EnableDynamoDBCondition
            - !Ref BatchTrackingTable
            - !Ref AWS::NoValue
          JOB_TRACKING_TABLE: !If
            - EnableDynamoDBCondition
            - !Ref JobTrackingTable
            - !Ref AWS::NoValue
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref S3BucketName
        - SQSPollerPolicy:
            QueueName: !GetAtt CRMQueue.QueueName
        - DynamoDBWritePolicy:
            TableName: !If
              - EnableDynamoDBCondition
              - !Ref BatchTrackingTable
              - !Ref AWS::NoValue
        - DynamoDBWritePolicy:
            TableName: !If
              - EnableDynamoDBCondition
              - !Ref JobTrackingTable
              - !Ref AWS::NoValue
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt CRMQueue.Arn
            BatchSize: 1
            MaximumBatchingWindowInSeconds: 10

  # ================================
  # API GATEWAY
  # ================================
  
  # REST API for status queries
  OCRAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${AWS::StackName}-api"
      StageName: !Ref Environment
      Description: OCR Project API for status queries
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      Tags:
        Environment: !Ref Environment

  # Batch Status Function
  BatchStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-batch-status"
      CodeUri: src/batch_status/
      Handler: app.lambda_handler
      Description: Returns batch processing status
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          BATCH_TRACKING_TABLE: !If
            - EnableDynamoDBCondition
            - !Ref BatchTrackingTable
            - !Ref AWS::NoValue
          JOB_TRACKING_TABLE: !If
            - EnableDynamoDBCondition
            - !Ref JobTrackingTable
            - !Ref AWS::NoValue
      Policies:
        - DynamoDBReadPolicy:
            TableName: !If
              - EnableDynamoDBCondition
              - !Ref BatchTrackingTable
              - !Ref AWS::NoValue
        - DynamoDBReadPolicy:
            TableName: !If
              - EnableDynamoDBCondition
              - !Ref JobTrackingTable
              - !Ref AWS::NoValue
      Events:
        GetBatchStatus:
          Type: Api
          Properties:
            RestApiId: !Ref OCRAPI
            Path: /batch/status/{batch_id}
            Method: GET
        PostBatchStatus:
          Type: Api
          Properties:
            RestApiId: !Ref OCRAPI
            Path: /batch/status
            Method: POST

  # Individual Status Function
  StatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-status"
      CodeUri: src/status/
      Handler: app.lambda_handler
      Description: Returns individual oficio status
      MemorySize: 256
      Timeout: 30
      Environment:
        Variables:
          JOB_TRACKING_TABLE: !If
            - EnableDynamoDBCondition
            - !Ref JobTrackingTable
            - !Ref AWS::NoValue
      Policies:
        - DynamoDBReadPolicy:
            TableName: !If
              - EnableDynamoDBCondition
              - !Ref JobTrackingTable
              - !Ref AWS::NoValue
        - S3ReadPolicy:
            BucketName: !Ref S3BucketName
      Events:
        GetStatus:
          Type: Api
          Properties:
            RestApiId: !Ref OCRAPI
            Path: /status/{job_id}
            Method: GET

  # ================================
  # IAM ROLES & PERMISSIONS
  # ================================
  
  # S3 Bucket Permission for Lambda (moved to top section)

  # ================================
  # CLOUDWATCH ALARMS
  # ================================
  
  # High error rate alarm
  HighErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-high-error-rate"
      AlarmDescription: High error rate in OCR processing
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref OCRProcessorFunction
      TreatMissingData: notBreaching

  # DLQ messages alarm
  DLQMessagesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-dlq-messages"
      AlarmDescription: Messages in dead letter queue
      MetricName: ApproximateNumberOfVisibleMessages
      Namespace: AWS/SQS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt OCRDeadLetterQueue.QueueName
      TreatMissingData: notBreaching

# ================================
# OUTPUTS
# ================================
Outputs:
  
  # S3 Bucket
  S3BucketName:
    Description: S3 bucket for document storage
    Value: !Ref DocumentStorage
    Export:
      Name: !Sub "${AWS::StackName}-S3Bucket"
  
  # SQS Queues
  OCRQueueURL:
    Description: OCR Processing Queue URL
    Value: !Ref OCRProcessingQueue
    Export:
      Name: !Sub "${AWS::StackName}-OCRQueue"
  
  CRMQueueURL:
    Description: CRM Integration Queue URL  
    Value: !Ref CRMQueue
    Export:
      Name: !Sub "${AWS::StackName}-CRMQueue"
  
  # API Gateway
  APIGatewayURL:
    Description: API Gateway URL for status queries
    Value: !Sub "https://${OCRAPI}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
    Export:
      Name: !Sub "${AWS::StackName}-APIGateway"
  
  # DynamoDB Tables (if enabled)
  BatchTrackingTable:
    Condition: EnableDynamoDBCondition
    Description: DynamoDB table for batch tracking
    Value: !Ref BatchTrackingTable
    Export:
      Name: !Sub "${AWS::StackName}-BatchTable"
  
  JobTrackingTable:
    Condition: EnableDynamoDBCondition
    Description: DynamoDB table for job tracking
    Value: !Ref JobTrackingTable
    Export:
      Name: !Sub "${AWS::StackName}-JobTable"
  
  # Lambda Functions
  DocumentProcessorArn:
    Description: Document Processor Lambda ARN
    Value: !GetAtt DocumentProcessorFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-DocumentProcessor"
  
  OCRProcessorArn:
    Description: OCR Processor Lambda ARN
    Value: !GetAtt OCRProcessorFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-OCRProcessor"
  
  # Environment Info
  Environment:
    Description: Environment name
    Value: !Ref Environment
    Export:
      Name: !Sub "${AWS::StackName}-Environment"